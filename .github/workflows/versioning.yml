name: Semantic Versioning

on:
  push:
    branches:
      - main

jobs:
  versioning:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.VERSION }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Determine Version
      id: version
      run: |
        branch_name=$(echo $GITHUB_REF | awk -F'/' '{print $3}')
        if [[ "$branch_name" == "main" ]]; then
          echo "Major version bump"
          echo "::set-output name=VERSION::$(echo $VERSION | awk -F'.' '{print $1 + 1}.0.0')"
        elif [[ "$branch_name" == "develop" ]]; then
          echo "Patch version bump"
          echo "::set-output name=VERSION::$(echo $VERSION | awk -F'.' '{print $1"."$2 + 1".0"}')"
        elif [[ "$branch_name" == "feat" ]]; then
          echo "Minor version bump"
          echo "::set-output name=VERSION::$(echo $VERSION | awk -F'.' '{print $1"."$2"."$3 + 1}')"
        elif [[ "$branch_name" == "release" ]]; then
          echo "Major version bump"
          echo "::set-output name=VERSION::$(echo $VERSION | awk -F'.' '{print $1 + 1}.0.0')"
        elif [[ "$branch_name" == "fix" ]]; then
          echo "Patch version bump (fix branch)"
          echo "::set-output name=VERSION::$(echo $VERSION | awk -F'.' '{print $1"."$2"."$3 + 1}')"
        else
          echo "Other branches; no version bump"
          echo "::set-output name=VERSION::$VERSION"
        fi
      env:
        VERSION: ${{ env.VERSION }}

    - name: Use Version
      run: |
        if [ "$branch_name" != "fix" ]; then
          echo "Using Version ${{ steps.version.outputs.version }}"
          # You can use the VERSION variable in your build and deployment steps
        else
          echo "This is a fix branch; no version change."
        fi
      env:
        VERSION: ${{ steps.version.outputs.version }}
