name: Semantic Versioning

on:
  push:
    branches:
      - 'release/*'
      - 'feat/*'
      - 'fix/*'
  pull_request:
    branches:
      - 'release/*'
      - 'feat/*'
      - 'fix/*'

jobs:
  set_version:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get the latest tag
      id: latest_tag
      run: |
        latest_tag=$(git describe --abbrev=0 --tags 2>/dev/null || echo "v1.0.0")
        echo "Latest tag: $latest_tag"
        echo "::set-output name=latest_tag::$latest_tag"
      shell: bash

    - name: Determine version type
      id: version_type
      run: |
        branch_name="${GITHUB_REF##*/}"
        case "$branch_name" in
          release/*)
            version_type="major"
            ;;
          feat/*)
            version_type="feat"
            ;;
          fix/*)
            version_type="patch"
            ;;
          *)
            version_type="unknown"
            ;;
        esac
        echo "Version type: $version_type"
        echo "::set-output name=version_type::$version_type"
      shell: bash

    - name: Set the version
      id: set_version
      run: |
        latest_tag="${{ steps.latest_tag.outputs.latest_tag }}"
        version_type="${{ steps.version_type.outputs.version_type }}"
        if [ "$version_type" == "major" ]; then
          IFS='.' read -ra version_parts <<< "$latest_tag"
          major_version="${version_parts[0]}"
          major_version=$((major_version + 1))
          new_version="$major_version.0.0"
        elif [ "$version_type" == "feat" ]; then
          IFS='.' read -ra version_parts <<< "$latest_tag"
          minor_version="${version_parts[1]}"
          minor_version=$((minor_version + 1))
          new_version="${version_parts[0]}.$minor_version.0"
        elif [ "$version_type" == "patch" ]; then
          IFS='.' read -ra version_parts <<< "$latest_tag"
          patch_version="${version_parts[2]}"
          patch_version=$((patch_version + 1))
          new_version="${version_parts[0]}.${version_parts[1]}.$patch_version"
        else
          new_version="1.0.0"
        fi
        echo "New version: $new_version"
        echo "::set-output name=new_version::$new_version"
      shell: bash

    - name: Update version file
      run: echo "${{ steps.set_version.outputs.new_version }}" > version.txt

    - name: Commit and push version change
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add version.txt
        git commit -m "Update version to ${{ steps.set_version.outputs.new_version }}"
        git push
