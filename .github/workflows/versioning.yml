name: Semantic Versioning

on:
  push:
    branches:
      - 'release/*'
      - 'feat/*'
      - 'fix/*'
  workflow_dispatch:

jobs:
  update-version:
    runs-on: ubuntu-latest

    steps:
    - name: Check if release exists
      id: check-release
      run: |
        version=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
        echo "::set-output name=version::$version"
      continue-on-error: true

    - name: Set version
      id: set-version
      run: |
        branch_name=$(echo ${GITHUB_REF#refs/heads/})
        current_version="${{ steps.check-release.outputs.version }}"
        if [[ $branch_name == "release/"* ]]; then
          major=$(echo $current_version | cut -d. -f1)
          new_version="v$((major + 1)).0.0"
        elif [[ $branch_name == "feat/"* ]]; then
          minor=$(echo $current_version | cut -d. -f2)
          new_version="v$(echo $current_version | cut -d. -f1).$((minor + 1)).0"
        elif [[ $branch_name == "fix/"* ]]; then
          patch=$(echo $current_version | cut -d. -f3)
          new_version="v$(echo $current_version | cut -d. -f1).$(echo $current_version | cut -d. -f2).$((patch + 1))"
        else
          echo "Invalid branch name: $branch_name"
          exit 1
        fi
        echo "::set-output name=new_version::$new_version"
      continue-on-error: true

    - name: Create GitHub Release
      if: success()
      run: |
        new_version="${{ steps.set-version.outputs.new_version }}"
        echo "Creating a GitHub release for version: $new_version"
        
        # Create a release with the new version
        gh release create $new_version -t $new_version
        
        # You can also add release notes and upload assets if needed
        # Example: gh release create $new_version -t $new_version --notes "Release notes here"
        # Example: gh release upload $new_version /path/to/asset
        
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
