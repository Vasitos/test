name: Semantic Versioning

on:
  push:
    branches:
      - '*'

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get latest tag
      id: latest_tag
      run: |
        latest_tag=$(git describe --abbrev=0 --tags)
        echo "Latest tag: $latest_tag"
        echo "::set-output name=latest_tag::$latest_tag"
      shell: bash

    - name: Determine version bump
      id: version_bump
      run: |
        branch_name=$(echo $GITHUB_REF | awk -F'/' '{print $3}')
        case $branch_name in
          release/*) version_bump="major";;
          feat/*) version_bump="minor";;
          fix/*) version_bump="patch";;
          *) version_bump="patch";;
        esac
        echo "Version bump: $version_bump"
        echo "::set-output name=version_bump::$version_bump"
      shell: bash

    - name: Calculate new version
      id: new_version
      run: |
        latest_tag=$INPUT_LATEST_TAG
        version_bump=$INPUT_VERSION_BUMP
        IFS='.' read -ra version_parts <<< "$latest_tag"
        case $version_bump in
          major) new_version="${version_parts[0]}.$((version_parts[1] + 1)).0";;
          minor) new_version="${version_parts[0]}.${version_parts[1]}.$((version_parts[2] + 1))";;
          patch) new_version="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}";;
        esac
        echo "New version: $new_version"
        echo "::set-output name=new_version::$new_version"
      shell: bash
      env:
        INPUT_LATEST_TAG: ${{ steps.latest_tag.outputs.latest_tag }}
        INPUT_VERSION_BUMP: ${{ steps.version_bump.outputs.version_bump }}

    - name: Create and push new tag
      if: steps.version_bump.outputs.version_bump != 'patch'
      run: |
        new_version=$INPUT_NEW_VERSION
        git tag $new_version
        git push origin $new_version
      shell: bash
      env:
        INPUT_NEW_VERSION: ${{ steps.new_version.outputs.new_version }}
